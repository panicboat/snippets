name: Scheduled PR Merge

on:
  issue_comment:
    types: [created]

jobs:
  schedule_merge:
    if: github.event.issue.pull_request && (startsWith(github.event.comment.body, '/schedule-merge') || startsWith(github.event.comment.body, '/schedule-merge-jst'))
    runs-on: ubuntu-latest
    steps:
      - name: Extract merge time from comment
        id: extract_time
        run: |
          COMMENT="${{ github.event.comment.body }}"

          # コマンドのタイプをチェック
          if [[ "$COMMENT" == "/schedule-merge-jst"* ]]; then
            # JST (Asia/Tokyo) タイムゾーン指定の場合
            JST_TIME=$(echo "$COMMENT" | grep -oP '/schedule-merge-jst \K[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}')
            if [ -z "$JST_TIME" ]; then
              echo "時間形式が正しくありません。/schedule-merge-jst YYYY-MM-DDThh:mm:ss の形式で指定してください。"
              exit 1
            fi

            # JST から UTC へ変換 (JST = UTC+9)
            MERGE_TIME_UTC=$(TZ=UTC date -d "TZ=\"Asia/Tokyo\" $JST_TIME" "+%Y-%m-%dT%H:%M:%SZ")
            TIMEZONE="JST (Asia/Tokyo)"
            ORIGINAL_TIME="$JST_TIME JST"
          else
            # UTC タイムゾーン指定の場合
            MERGE_TIME_UTC=$(echo "$COMMENT" | grep -oP '/schedule-merge \K[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z')
            if [ -z "$MERGE_TIME_UTC" ]; then
              echo "時間形式が正しくありません。/schedule-merge YYYY-MM-DDThh:mm:ssZ の形式で指定してください。"
              exit 1
            fi
            TIMEZONE="UTC (協定世界時)"
            ORIGINAL_TIME="$MERGE_TIME_UTC"
          fi

          echo "MERGE_TIME_UTC=$MERGE_TIME_UTC" >> $GITHUB_ENV
          echo "TIMEZONE=$TIMEZONE" >> $GITHUB_ENV
          echo "ORIGINAL_TIME=$ORIGINAL_TIME" >> $GITHUB_ENV

          # 現在時刻と指定時刻の差分（秒）を計算
          NOW=$(date -u +%s)
          TARGET=$(date -u -d "$MERGE_TIME_UTC" +%s)
          DELAY=$((TARGET - NOW))

          if [ $DELAY -le 0 ]; then
            echo "指定された時間は過去です。"
            exit 1
          fi

          echo "DELAY=$DELAY" >> $GITHUB_ENV

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const mergeTimeUTC = process.env.MERGE_TIME_UTC;
            const timezone = process.env.TIMEZONE;
            const originalTime = process.env.ORIGINAL_TIME;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `✅ PR は ${originalTime} (${timezone}) にマージされるようスケジュールされました。\n内部処理時間: ${mergeTimeUTC} (UTC)`
            });

      - name: Wait until scheduled time
        run: |
          echo "⏱️ ${{ env.MERGE_TIME_UTC }} (UTC) までの ${{ env.DELAY }} 秒間待機します..."
          sleep ${{ env.DELAY }}

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;

            try {
              // PR の情報を取得
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              // PR がまだオープン状態であることを確認
              if (pullRequest.state !== 'open') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: '❌ PR はすでにクローズされているか、マージされているため、スケジュールされたマージを実行できませんでした。'
                });
                return;
              }

              // PR をマージ
              const mergeResult = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'merge'
              });

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '✅ スケジュールに従って PR をマージしました。'
              });
            } catch (error) {
              console.error('PR のマージに失敗しました:', error);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `❌ マージに失敗しました: ${error.message}`
              });
            }
