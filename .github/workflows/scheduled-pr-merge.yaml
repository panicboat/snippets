name: scheduled-pr-merge

on:
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 15 * * *'  # Run every day at midnight JST

jobs:
  # Job that runs when a comment is received
  schedule_merge_request:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && (startsWith(github.event.comment.body, '/schedule-merge') || startsWith(github.event.comment.body, '/schedule-merge-jst'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Extract merge time from comment
        id: extract_time
        env:
          COMMENT: ${{ github.event.comment.body }}
        run: bash .github/actions/scheduled-pr-merge.sh

      - name: Schedule PR for merge
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          MERGE_TIME_UTC: ${{ steps.extract_time.outputs.merge_time_utc }}
          TIMEZONE: ${{ steps.extract_time.outputs.timezone }}
          ORIGINAL_TIME: ${{ steps.extract_time.outputs.original_time }}
        with:
          script: |
            const issueNumber = context.issue.number;

            // Add schedule information as a label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: ['scheduled-merge']
            });

            // Add merge time information in a comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `✅ This PR is scheduled to be merged at ${process.env.ORIGINAL_TIME} (${process.env.TIMEZONE}).`
            });

            // Add merge time to PR description
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `SCHEDULED_MERGE_TIME=${process.env.MERGE_TIME_UTC}`
            });

  # Job that runs periodically
  check_and_merge:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Find and process scheduled merges
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const now = new Date().toISOString();
            console.log(`Current time: ${now}`);

            // Search for PRs with 'scheduled-merge' label
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            // Find candidates for scheduled merges
            for (const pull of pulls) {
              const prNumber = pull.number;

              // Check labels
              const hasScheduleLabel = pull.labels.some(label => label.name === 'scheduled-merge');
              if (!hasScheduleLabel) continue;

              console.log(`PR #${prNumber} is marked for scheduled merge`);

              // Find scheduled time from comments
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });

              // Look for schedule time
              let scheduledTime = null;
              for (const comment of comments) {
                const match = comment.body.match(/SCHEDULED_MERGE_TIME=(.+)$/);
                if (match) {
                  scheduledTime = new Date(match[1]);
                  break;
                }
              }

              if (!scheduledTime) {
                console.log(`No schedule time found for PR #${prNumber}`);
                continue;
              }

              const currentTime = new Date();
              console.log(`Scheduled time: ${scheduledTime.toISOString()}`);

              // Merge if current time has passed the scheduled time
              if (currentTime >= scheduledTime) {
                console.log(`It's time to merge PR #${prNumber}`);

                try {
                  // Merge the PR
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    merge_method: 'squash'
                  });

                  // Remove the label
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    name: 'scheduled-merge'
                  });

                  // Post completion message
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: '✅ PR has been merged according to schedule.'
                  });

                  console.log(`Merge of PR #${prNumber} completed`);
                } catch (error) {
                  console.error(`Failed to merge PR #${prNumber}:`, error);

                  // Post error message
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `❌ Merge failed: ${error.message}`
                  });
                }
              } else {
                console.log(`It's not yet time to merge PR #${prNumber}`);
              }
            }
