name: Merge Schedule

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
  schedule:
    # https://crontab.guru/every-hour
    - cron: '* * * * *'

jobs:
  merge_schedule:
    runs-on: ubuntu-latest
    steps:
      - uses: gr2m/merge-schedule-action@v2
        id: merge-schedule
        with:
          # Merge method to use. Possible values are merge, squash or
          # rebase. Default is merge.
          merge_method: squash
          # Time zone to use. Default is UTC.
          time_zone: 'Asia/Tokyo'
          # Require all pull request statuses to be successful before
          # merging. Default is `false`.
          require_statuses_success: 'true'
          # Label to apply to the pull request if the merge fails. Default is
          # `automerge-fail`.
          automerge_fail_label: 'merge-schedule-failed'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process Scheduled PRs
        uses: actions/github-script@v6
        # Only run if there are scheduled pull requests
        if: ${{ fromJson(steps.merge-schedule.outputs.scheduled_pull_requests)[0] != null }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullRequests = JSON.parse(`${{ steps.merge-schedule.outputs.scheduled_pull_requests }}`);
            const now = new Date();
            for (const item of pullRequests) {
              // Fetch the pull request details
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: item.number,
              });
              // Do something with the pull request
            }

      - name: Process Merged PRs
        uses: actions/github-script@v6
        # Only run if there are merged pull requests
        if: ${{ fromJson(steps.merge-schedule.outputs.merged_pull_requests)[0] != null }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullRequests = JSON.parse(`${{ steps.merge-schedule.outputs.merged_pull_requests }}`);
            const now = new Date();
            for (const item of pullRequests) {
              // Fetch the pull request details
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: item.number,
              });
              // Do something with the pull request
            }
